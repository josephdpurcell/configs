# bilbo-web

A web server that I use for:

* Feedafever
* Listmonk
* Directus
* Reverse proxy (used as an alt to ngrok)
* Having a static IP, which is useful in testing and development
* Minecraft

-----------------------------------------------------------------------------------
# Setup droplet

Login to DigitalOcean and create an ubuntu LTS droplet with backups.

I ran out of mem at 512mb (trying to boot listmonk?), so I resized to 1gb mem

I ran out of mem at 1gb trying to run directus, so I resized to 2gb mem

-----------------------------------------------------------------------------------
# Install reporting

curl -sSL https://repos.insights.digitalocean.com/install.sh | sudo bash

-----------------------------------------------------------------------------------
# Various CLI tools

# We want this on this server to test MySQL conn
sudo apt-get install mysql-client

sudo apt install net-tools

sudo apt install tree

sudo apt install unzip

-----------------------------------------------------------------------------------
# SETUP USER

groupadd bilbo
useradd -d /home/bilbo -g bilbo -s /bin/bash bilbo
mkdir /home/bilbo
chown bilbo:bilbo /home/bilbo
adduser bilbo sudo
passwd bilbo

# add bilbo to adm to be able to read files created by logrotate
usermod -a -G adm bilbo

su bilbo
ssh-keygen -t rsa -b 4096
# Add ssh key to ~/.ssh/authorized_keys
chmod g-w ~/.ssh/authorized_keys

-----------------------------------------------------------------------------------
# SETUP GIT

# git is already installed

git config --global user.email "myemail@example.com"
git config --global user.name "Joseph D. Purcell"

-----------------------------------------------------------------------------------
# FIREWALL

# Note: did I need to add iptables-persistent??
sudo apt-get install iptables-persistent
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -m comment --comment "allow all connections originating from server"
iptables -A INPUT -i lo -j ACCEPT -m comment --comment "allow everything on loopback interface"
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP -m comment --comment "drop null packets"
iptables -A INPUT -p tcp ! --syn -m state --state NEW -j DROP -m comment --comment "drop empty connections and syn-flood packets"
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP -m comment --comment "drop XMAS packets"
iptables -A INPUT -p tcp --dport 80 -j ACCEPT -m comment --comment "allow HTTP from WAN"
iptables -A INPUT -p tcp --dport 443 -j ACCEPT -m comment --comment "allow HTTPS from WAN"
iptables -A INPUT -p tcp --dport 22 -j ACCEPT -m comment --comment "allow SSH from WAN"
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT
# TODO: how did I save these?

ip6tables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -m comment --comment "allow all connections originating from server"
ip6tables -A INPUT -i lo -j ACCEPT -m comment --comment "allow everything on loopback interface"
ip6tables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP -m comment --comment "drop null packets"
ip6tables -A INPUT -p tcp ! --syn -m state --state NEW -j DROP -m comment --comment "drop empty connections and syn-flood packets"
ip6tables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP -m comment --comment "drop XMAS packets"
ip6tables -A INPUT -p tcp --dport 80 -j ACCEPT -m comment --comment "allow HTTP from WAN"
ip6tables -A INPUT -p tcp --dport 443 -j ACCEPT -m comment --comment "allow HTTPS from WAN"
ip6tables -A INPUT -p tcp --dport 22 -j ACCEPT -m comment --comment "allow SSH from WAN"
ip6tables -P INPUT DROP
ip6tables -P FORWARD DROP
ip6tables -P OUTPUT ACCEPT

cp /etc/iptables/rules.v6 /etc/iptables/rules.v6-2022-11-17-1030
ip6tables-save > /etc/iptables/rules.v6

-----------------------------------------------------------------------------------
# SSH

Modify following configs

-----------------------------------------------------------------------------------
# Unattended upgrades


Modify following configs

-----------------------------------------------------------------------------------
# Apache and PHP

# Install apache
sudo apt install apache2
sudo systemctl enable apache2
sudo a2enmod ssl
sudo a2enmod rewrite
sudo a2enmod headers
sudo a2enmod proxy
sudo a2enmod need proxy_http
# Look at installed modules:
sudo apache2ctl -M
sudo systemctl restart apache2
# Setup file perms on web dir
chown -R www-data:www-data /var/www
chmod -R g+s /var/www
sudo usermod -a -G www-data bilbo
# Install php things
sudo add-apt-repository ppa:ondrej/php
sudo apt update
sudo apt install php7.2 php7.2-cli php7.2-curl php7.2-gd php7.2-intl php7.2-mbstring php7.2-xdebug php7.2-xml php7.2-xsl php7.2-mysql
sudo update-alternatives --set php /usr/bin/php7.2
sudo a2enmod php7.2
sudo systemctl restart apache2

# waaat... apache is segfaulting.
sudo apt list installed | grep php
sudo apt remove --purge libapache2-mod-php
sudo apt remove --purge apache2 php*
# try again after modifying the above so it should work

-----------------------------------------------------------------------------------
# LOGROTATE

vim /etc/logrotate.d/apache2-f.example.com
vim /etc/logrotate.d/apache2-list.example.com
vim /etc/logrotate.d/apache2-cms.example.com

# use example

-----------------------------------------------------------------------------------
# Docker

# Follow docker install https://docs.docker.com/engine/install/ubuntu/
apt-get update
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
sudo docker run hello-world
# Delete it
docker ps -a
docker rm [thecontainerid]

# Configure logs
vim /etc/docker/daemon.json
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "7"
  }
}
service docker restart

-----------------------------------------------------------------------------------
# certbot

# https://certbot.eff.org/instructions?ws=other&os=ubuntufocal

sudo snap install core
sudo snap refresh core
sudo apt-get remove certbot
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot

# How to generate a cert:
# Temporarily turn off apache
service apache2 stop
sudo certbot certonly --standalone
# output included:
# Successfully received certificate.
# Certificate is saved at: /etc/letsencrypt/live/example.com/fullchain.pem
# Key is saved at:         /etc/letsencrypt/live/example.com/privkey.pem
sudo certbot renew --dry-run
# Start apache again
service apache2 start

# RENEW
sudo -s
service apache2 stop
certbot renew --dry-run
certbot renew
service apache2 start

-----------------------------------------------------------------------------------
# MYSQL

docker pull mysql:8.0

mkdir -p /var/www/mysql.example.com/docker
cd /var/www/mysql.example.com/docker

docker-compose.yml
```
version: "3"

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    ports:
      - "172.17.0.1:3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "thepass"
      TZ: UTC
    volumes:
      - mysql:/var/lib/mysql

volumes:
  mysql:
```

# Note: listening on 172.17.0.1 allows it to be available to other containers at that IP

# Add .env with a project, this is helpful with multiple dockers on the same server each in a different folder named "docker"
.env
```
COMPOSE_PROJECT_NAME=mysql
```

# Example of setting up a database and user:
docker exec -it mysql /bin/bash
mysql
CREATE DATABASE somename;
CREATE USER 'somename'@'%' IDENTIFIED WITH mysql_native_password BY 'somepass';
GRANT ALL PRIVILEGES ON somename.* TO 'somename'@'%';
# Note: root access remains denied except from localhist (ie docker exec then mysql)

# Connect to mysql as root:
docker exec -it mysql /bin/bash
mysql
# Connect to mysql as a user from host machine:
# Note: specifying host 0.0.0.0 is required since default mysql cli looks for socket
mysql -u dbname -p -h 0.0.0.0 --port=3306 dbname

# tips:
docker compose rm mysql

# USAGE
docker compose down
docker compose up -d mysql

-----------------------------------------------------------------------------------
# LISTMONK

# https://yasoob.me/posts/setting-up-listmonk-opensource-newsletter-mailing/
# https://listmonk.app/docs/installation/
# https://devgypsy.com/post/2020-08-18-installing-listmonk-newsletter-manager/

mkdir -p /var/www/list.example.com/docker/
cd /var/www/list.example.com/docker/
wget https://raw.githubusercontent.com/knadh/listmonk/master/install-prod.sh
# Add .env with a project, this is helpful with multiple dockers on the same server each in a different folder named "docker"
.env
```
COMPOSE_PROJECT_NAME=listmonk
```
# Change docker-compose to docker compose in certain places:
vim install-prod.sh
bash install-prod.sh

# Setup a fake HTML page and robots, and logs dir
mkdir /var/www/list.example.com/html
echo "<h1>You are in the wrong place.</h1>" > /var/www/list.example.com/html/index.html
echo -e "User-agent: *\nDisallow: /" > /var/www/list.example.com/html/robots.txt
mkdir /var/www/list.example.com/logs
touch /var/www/list.example.com/logs/access.log
touch /var/www/list.example.com/logs/error.log
chown -R www-data:www-data /var/www/list.example.com/logs
chown -R www-data:www-data /var/www/list.example.com/html

# Generate a cert for the domain used; see certbot instructions

# Setup apache to route to the docker container
vim /etc/apache2/sites-available/list.example.com.conf
a2ensite list.example.com
service apache2 reload

# Refactor to use static
# Copy the static files
# Note: I setup ~/src/{domain}/{vendor}/{package} because Go community suggested that at one point and I really like it
cd ~
mkdir -p ~/src/github.com/knadh
cd ~/src/github.com/knadh
git clone https://github.com/knadh/listmonk
cd /var/www/list.example.com/docker
cp -r ~/src/github.com/knadh/listmonk/static ./static
# A fix for dirs, see https://github.com/knadh/listmonk/issues/1074
mv static/public/templates/* static/public/
# Make sure directories are right:
ls static/
email-templates  public
ls static/public
ls static/public/
archive.html  home.html  index.html  message.html  optin.html  static  subscription-form.html  subscription.html
# Modify docker-compose.yml to use custom command and static volume according to https://yasoob.me/posts/setting-up-listmonk-opensource-newsletter-mailing/
    command: "./listmonk --static-dir=/listmonk/static"
    volumes:
      - ./static:/listmonk/static
# Run this to ensure it takes the changes; only needs run once
# Note: the blog post suggests `docker compose up --force-recreate -d app` but this is not necessary; I tried plain up and the fs and ps in container reflect the changes

# Access database like so:
$ docker exec -it listmonk_db_1 /bin/bash
root@623c84d3d072:/# psql -d listmonk  -U listmonk -W
Password:
psql (11.11 (Debian 11.11-1.pgdg90+1))
Type "help" for help.
listmonk=#
SELECT * from subscriber_lists;
UPDATE subscriber_lists SET status='confirmed' WHERE list_id=4;

# UPGRADE:
docker exec -t listmonk_app ./listmonk --version
v2.2.0 (bbbf28c 2022-07-30T18:18:24Z)
docker stop listmonk_app
docker compose pull
docker compose run --rm app ./listmonk --upgrade
docker compose up -d app
docker exec -t listmonk_app ./listmonk --version
v2.3.0 (448f0e3 2022-11-27T17:52:51Z)
v2.4.0 (c668523 2023-03-20T13:50:31Z)


# USAGE:
# Login
docker exec -it listmonk_app /bin/sh
# Stop
docker stop listmonk_app
docker stop listmonk_db
# Start
docker start listmonk_app
docker start listmonk_db

# Up (do you need this beyond first?)
docker compose up -d
# Or a specific one:
docker compose up -d db
docker compose up -d app
# if u never run this command, execute it: docker compose run --rm app ./listmonk --install


-----------------------------------------------------------------------------------
# FEEDAFEVER

# Create database and user:
cd /var/www/mysql.example.com/docker
docker exec -it mysql /bin/bash
mysql
CREATE DATABASE feedafever;
CREATE USER 'feedafever'@'%' IDENTIFIED WITH mysql_native_password BY 'thepass';
GRANT ALL PRIVILEGES ON feedafever.* TO 'feedafever'@'%';

cat ff.sql | mysql -u USERNAME -p -h HOST --port=PORT DBNAME

# copy files into its place using git repo

# Update config

-----------------------------------------------------------------------------------
# DIRECTUS

Helpful URLs:

* https://docs.directus.io/self-hosted/config-options.html
* https://docs.directus.io/configuration/flows.html#data-chain-variables
* https://github.com/directus/directus/issues/16674
* https://docs.directus.io/reference/environment-variables/

# Add .env with a project, this is helpful with multiple dockers on the same server each in a different folder named "docker"
.env
```
COMPOSE_PROJECT_NAME=cms
```

```
version: '3'
services:
  directus:
    container_name: directus
    image: directus/directus:latest
/bin/bash: line 1: pbpaste: command not found
    restart: unless-stopped
    network_mode: "host"
    ports:
      - 8055:8055
    volumes:
      # By default, uploads are stored in /directus/uploads
      # Always make sure your volumes matches the storage root when using
      # local driver
      - ./uploads:/directus/uploads
      # Make sure to also mount the volume when using SQLite
      # - ./database:/directus/database
      # If you want to load extensions from the host
      # - ./extensions:/directus/extensions
    environment:
      KEY: 'auuid'
      SECRET: 'auuid'
      #LOG_LEVEL: 'trace'

      DB_CLIENT: 'mysql'
      DB_HOST: '0.0.0.0'
      DB_PORT: '3306'
      DB_DATABASE: 'directus'
      DB_USER: 'directus'
      DB_PASSWORD: 'thepass'

      ADMIN_EMAIL: 'example@gmail.com'
      ADMIN_PASSWORD: 'apass that you should change after first boot'

      # Make sure to set this in production
      # (see https://docs.directus.io/self-hosted/config-options#general)
      PUBLIC_URL: 'https://cms.example.com'

      EMAIL_FROM: 'mailman@example.com'
      EMAIL_TRANSPORT: 'smtp'
      EMAIL_SMTP_HOST: 'mail.example.com'
      EMAIL_SMTP_PORT: '587'
      EMAIL_SMTP_USER: 'mailman@example.com'
      EMAIL_SMTP_PASSWORD: 'thepass'
```

# Create database and user:
docker exec -it mysql /bin/bash
mysql
CREATE DATABASE directus;
CREATE USER 'directus'@'%' IDENTIFIED WITH mysql_native_password BY 'thepass';
GRANT ALL PRIVILEGES ON directus.* TO 'directus'@'%';

# Generate a cert for the domain used; see certbot instructions

# Setup apache to route to the docker container
vim /etc/apache2/sites-available/cms.example.com.conf
a2ensite cms.example.com
service apache2 reload

# On first boot run in foreground to make sure it goes OK:
docker compose up directus
I ran into:
 Error: ROLLBACK - Cannot enqueue Query after fatal error.
 directus  |   code: 'PROTOCOL_ENQUEUE_AFTER_FATAL_ERROR',
Maybe its an out of mem issue?
Yep. After resize, delete db, create db, and boot again it works.

# USAGE:
# Login
docker exec -it directus /bin/sh
# Down
docker compose down
# Up
docker compose up -d directus


-----------------------------------------------------------------------------------
# MINECRAFT

* https://serialized.net/2021/02/minecraft_server_docker/

# Allow it and start it:
root@web:/var/www/example.com/docker# iptables -A INPUT -p tcp -s 1.1.1.1 --dport 25565 -j ACCEPT -m comment --comment "allow minecraft from home"
root@web:/var/www/example.com/docker# docker run -d -p 25565:25565 -v /var/www/example.com/docker/data --name mc -e EULA=TRUE --restart always itzg/minecraft-server

# Client:
sudo snap install mc-installer


# Hmm... you gotta pay $30? Is that a lifetime license?


-----------------------------------------------------------------------------------
# APPENDIX I. Debugging

# DEBUG TIP 1: Directus

Saving workflow error:

[RECORD_NOT_UNIQUE] Field "resolve" has to be unique.

https://github.com/directus/directus/issues/14185

# DEBUG TIP 2: Directus

conditions don't work? so use Run Script https://github.com/directus/directus/issues/14571#issuecomment-1315513057

detailed examples https://github.com/directus/directus/issues/16674

# DEBUG TIP 3: Listmonk

listmonk can't resub

https://github.com/knadh/listmonk/issues/588

# DEBUG TIP 4: Docker logs

Any container name you can get logs for:

docker logs -f listmonk_app

-----------------------------------------------------------------------------------
# APPENDIX II. TODOs

# TODO: backups; see volume mounts https://listmonk.app/docs/configuration/#using-volumes; its at /var/lib/docker/volumes/docker_listmonk-data/_data
# TODO: custom templates for subscribe
# TODO: containerize feedafever
# TODO: lock down mysql users to an IP instead of %
# TODO: move my main site over

Listmonk:
- change email template to my liking:
    * link to "privacy"
- send the initial email: "Welcome back!"
    * instructions that you must add "mailman@example.com"; this is the same as before
    * explain why I went dormant: Transitioning to an additional child + Google mail shutting me down, I now have DMARC
- change header to link to an "about" and put an "about" in the footer of the pages
- change SPF from softfail to hard
- change DMARC from none to reject
